//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    postApiSubmit(entry: ValidatedEntry, signal?: AbortSignal): Promise<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/submit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entry);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiSubmit(_response);
        });
    }

    protected processPostApiSubmit(response: Response): Promise<SwaggerResponse<void>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return new SwaggerResponse(status, _headers, null as any);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class Entry implements IEntry {
    recaptchaResponse!: string;
    email!: string;
    firstName!: string;
    lastName!: string;
    answers!: string;
    termsAndConditions!: boolean;
    optIn?: boolean;

    constructor(data?: IEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property) && this.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }

    }

    init(_data?: any) {
        if (_data) {
            this.recaptchaResponse = _data["RecaptchaResponse"];
            this.email = _data["Email"];
            this.firstName = _data["FirstName"];
            this.lastName = _data["LastName"];
            this.answers = _data["Answers"];
            this.termsAndConditions = _data["TermsAndConditions"];
            this.optIn = _data["OptIn"];
        }
    }

    static fromJS(data: any): Entry {
        data = typeof data === 'object' ? data : {};
        let result = new Entry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["RecaptchaResponse"] = this.recaptchaResponse;
        data["Email"] = this.email;
        data["FirstName"] = this.firstName;
        data["LastName"] = this.lastName;
        data["Answers"] = this.answers;
        data["TermsAndConditions"] = this.termsAndConditions;
        data["OptIn"] = this.optIn;
        return data;
    }
}

export interface IEntry {
    recaptchaResponse: string;
    email: string;
    firstName: string;
    lastName: string;
    answers: string;
    termsAndConditions: boolean;
    optIn?: boolean;
}

export class ValidatedEntry extends Entry implements IValidatedEntry {

    constructor(data?: IValidatedEntry) {
        super(data);
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property) && this.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }

    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ValidatedEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ValidatedEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IValidatedEntry extends IEntry {
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}